{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/normal.js","../lib/factory.js","../lib/index.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\nvar isnan = require( '@stdlib/assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( mu, sigma ) {\n\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\treturn new TypeError( format( 'invalid argument. `%s` must be a number and not `NaN`. Value: `%s`.', 'mu', mu ) );\n\t}\n\tif ( !isPositive( sigma ) ) {\n\t\treturn new TypeError( format( 'invalid argument. `%s` must be a positive number. Value: `%s`.', 'sigma', sigma ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns a pseudorandom number from a normal distribution with parameters `mu` and `sigma`.\n*\n* @private\n* @param {PRNG} rand - pseudorandom number generator\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {number} pseudorandom number\n*/\nfunction normal( rand, mu, sigma ) {\n\treturn mu + (sigma*rand());\n}\n\n\n// EXPORTS //\n\nmodule.exports = normal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar noop = require( '@stdlib/utils-noop' );\nvar randn = require( '@stdlib/random-base-improved-ziggurat' ).factory;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar typedarray2json = require( '@stdlib/array-to-json' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\nvar normal0 = require( './normal.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating normally distributed random numbers.\n*\n* @param {number} [mu] - mean\n* @param {PositiveNumber} [sigma] - standard deviation\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `mu` must be a number\n* @throws {TypeError} `sigma` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var normal = factory( 0.0, 1.0 );\n* var v = normal();\n* // returns <number>\n*\n* @example\n* var normal = factory( -3.0, 0.5, {\n*     'seed': 297\n* });\n* var v = normal();\n* // returns <number>\n*/\nfunction factory() {\n\tvar sigma;\n\tvar rnorm;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\tvar mu;\n\n\tif ( arguments.length === 0 ) {\n\t\trnorm = randn();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.', opts.prng ) );\n\t\t\t}\n\t\t\trnorm = randn({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trnorm = randn( opts );\n\t\t}\n\t} else {\n\t\tmu = arguments[ 0 ];\n\t\tsigma = arguments[ 1 ];\n\t\terr = validate( mu, sigma );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trnorm = randn({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trnorm = randn( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trnorm = randn();\n\t\t}\n\t}\n\tif ( mu === void 0 ) {\n\t\tprng = normal2;\n\t} else {\n\t\tprng = normal1;\n\t}\n\trand = rnorm.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'normal' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( mu === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ mu, sigma ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number from a normal distribution with bound parameters `mu` and `sigma`.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = normal1();\n\t* // returns <number>\n\t*/\n\tfunction normal1() {\n\t\treturn normal0( rnorm, mu, sigma );\n\t}\n\n\t/**\n\t* Returns a normally distributed pseudorandom number with mean `mu` and standard deviation `sigma`.\n\t*\n\t* @private\n\t* @param {number} mu - mean\n\t* @param {PositiveNumber} sigma - standard deviation\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = normal2( 0.0, 1.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = normal2( 0.0, -1.0 );\n\t* // returns NaN\n\t*/\n\tfunction normal2( mu, sigma ) {\n\t\tif (\n\t\t\tisnan( mu ) ||\n\t\t\tisnan( sigma ) ||\n\t\t\tsigma <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn normal0( rnorm, mu, sigma );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normally distributed pseudorandom numbers.\n*\n* @module @stdlib/random-base-normal\n*\n* @example\n* var normal = require( '@stdlib/random-base-normal' );\n*\n* var v = normal( 0.0, 1.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-normal' ).factory;\n* var normal = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = normal();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-normal' ).factory;\n* var normal = factory({\n*     'seed': 297\n* });\n*\n* var v = normal( -3.0, 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar normal = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( normal, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = normal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a normally distributed pseudorandom number with mean `mu` and standard deviation `sigma`.\n*\n* @name normal\n* @type {PRNG}\n* @param {number} mu - mean\n* @param {PositiveNumber} sigma - standard deviation\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = normal( 0.0, 1.0 );\n* // returns <number>\n*\n* @example\n* var v = normal( 0.0, -1.0 );\n* // returns NaN\n*/\nvar normal = factory();\n\n\n// EXPORTS //\n\nmodule.exports = normal;\n"],"names":["isNumber","require$$0","isPrimitive","isPositive","require$$1","format","require$$2","isnan","require$$3","validate_1","mu","sigma","TypeError","normal_1","rand","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","isObject","isFunction","require$$4","hasOwnProp","require$$5","constantFunction","require$$6","noop","require$$7","randn","require$$8","factory","require$$9","typedarray2json","require$$10","require$$11","validate","require$$12","normal0","require$$13","factory_1","rnorm","opts","prng","err","arguments","length","normal2","normal1","PRNG","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","seed","seedLength","stateLength","byteLength","state","s","out","name","NAME","params","NaN","normal","lib"],"mappings":"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"}